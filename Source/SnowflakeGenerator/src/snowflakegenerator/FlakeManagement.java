package snowflakegenerator;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.List;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.geom.Area;
import java.awt.geom.PathIterator;
/**
 *
 * @author Georgiy Farina
 * @versin 4.10.19
 */
public class FlakeManagement extends JFrame{
    
    private int width = 1024;
    
    private int height = 768;
    
    private List<Point> punti;
    
    private int bordoOrizzontale = 100;
    
    private int catetoMaggiore = height/2;
    
    private int catetoMinore = (int)(catetoMaggiore/Math.sqrt(3));
    
    private int ipotenusa = catetoMinore*2;
    
    private int x[];
    
    private int y[];
    
    private Polygon forma = new Polygon();
    
    private Polygon triangolo = new Polygon();
    
    public static final int DIM_MIN[] = {1024,768};
    
    private Area areaForma = new Area(forma);
    
    private Area areaTriangolo = new Area(triangolo);
    
    
    private Area areaFinale;

    /**
     * Creates new form FlakeManagement
     */
    public FlakeManagement() {
        initComponents();
        this.setSize(1024,768);
        this.punti = new ArrayList<>();
        
        this.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent e){
                addPunto(e.getPoint());
                repaint();
            }
        }); 
        
        triangolo.addPoint(bordoOrizzontale, height/4);
        triangolo.addPoint(bordoOrizzontale+catetoMinore, height/4);
        triangolo.addPoint(bordoOrizzontale+catetoMinore, height/4 + catetoMaggiore);
    }
    
    /*public void redraw() {
        buffer = new BufferedImage(
                height, // height
                width, // width
                BufferedImage.TYPE_4BYTE_ABGR); // ABGR = RGBA, 4-byte (r, g, b, a) per pixel
        Graphics g = buffer.getGraphics();
        // do your drawing here
        //if (this.getGraphics()){
            // 'this' is already shown, so it needs a redraw
            this.paint(this.getGraphics()); // little hack
        //}
    }*/
    
    private void addPunto(Point p){
        punti.add(p);
    }
    
    private void removePunto(Point p){
        punti.remove(p);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        bottoneIndietro = new javax.swing.JButton();
        bottoneSalva = new javax.swing.JButton();
        bottoneReset = new javax.swing.JButton();
        bottoneGenera = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1024, 768));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        bottoneIndietro.setBackground(new java.awt.Color(255, 51, 51));
        bottoneIndietro.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bottoneIndietro.setText("Indietro");
        bottoneIndietro.setName(""); // NOI18N
        bottoneIndietro.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                bottoneIndietroComponentHidden(evt);
            }
        });
        bottoneIndietro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tornaIndietro(evt);
            }
        });

        bottoneSalva.setBackground(new java.awt.Color(255, 51, 51));
        bottoneSalva.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bottoneSalva.setText("Salva");
        bottoneSalva.setName(""); // NOI18N
        bottoneSalva.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                bottoneSalvaComponentHidden(evt);
            }
        });
        bottoneSalva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneSalva(evt);
            }
        });

        bottoneReset.setBackground(new java.awt.Color(255, 51, 51));
        bottoneReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bottoneReset.setText("Reset");
        bottoneReset.setName(""); // NOI18N
        bottoneReset.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                bottoneReset1ComponentHidden(evt);
            }
        });
        bottoneReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneReset1(evt);
            }
        });

        bottoneGenera.setBackground(new java.awt.Color(255, 51, 51));
        bottoneGenera.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bottoneGenera.setText("Genera");
        bottoneGenera.setName(""); // NOI18N
        bottoneGenera.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                bottoneGeneraComponentHidden(evt);
            }
        });
        bottoneGenera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneGenera(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bottoneIndietro, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(bottoneSalva, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bottoneReset, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bottoneGenera, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(461, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bottoneIndietro, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bottoneSalva, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bottoneReset, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bottoneGenera, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 575, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(142, 142, 142))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tornaIndietro(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tornaIndietro
        this.setVisible(false);
        new StartMenu().setVisible(true);
    }//GEN-LAST:event_tornaIndietro

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        allargaArea();
    }//GEN-LAST:event_formComponentResized

    private void bottoneIndietroComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_bottoneIndietroComponentHidden
        
    }//GEN-LAST:event_bottoneIndietroComponentHidden

    private void bottoneSalvaComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_bottoneSalvaComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_bottoneSalvaComponentHidden

    private void bottoneSalva(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneSalva
        JFileChooser fileChooser = new JFileChooser();
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV files", "csv");
        fileChooser.setFileFilter(filter);
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        int ris = fileChooser.showOpenDialog(this);
        if (ris == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
        }
    }//GEN-LAST:event_bottoneSalva

    private void bottoneReset1ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_bottoneReset1ComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_bottoneReset1ComponentHidden

    private void bottoneReset1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneReset1
        // TODO add your handling code here:
    }//GEN-LAST:event_bottoneReset1

    private void bottoneGeneraComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_bottoneGeneraComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_bottoneGeneraComponentHidden

    private void bottoneGenera(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneGenera
        
        this.areaTriangolo.subtract(areaForma);
        
        PathIterator iterator = areaTriangolo.getPathIterator(null);
        
        Polygon triangoloNuovo = new Polygon();
        float[] floats = new float[6];
        while (!iterator.isDone()) {
            int type = iterator.currentSegment(floats);
            int x = (int) floats[0];
            int y = (int) floats[1];
            if(type != PathIterator.SEG_CLOSE) {
                triangoloNuovo.addPoint(x, y);
                
            }
            iterator.next();
        }
        
        this.triangolo.reset();
        this.triangolo = triangoloNuovo;
        this.forma.reset();
        
        repaint();
        
    }//GEN-LAST:event_bottoneGenera

        //button.setLocation(getWidth()/2-width/2, getHeight()/2-height/2); 
    private void allargaArea() {
        this.triangolo.reset();
        this.width = this.getWidth();
        this.height = this.getHeight();
        catetoMaggiore = height/2;
        catetoMinore = (int)(catetoMaggiore/Math.sqrt(3));
        ipotenusa = catetoMinore*2;
        
        int diffX = width - DIM_MIN[0];
        int diffY = height - DIM_MIN[1];
        if(width > DIM_MIN[0]){
            System.out.println("largezza");
            bordoOrizzontale = 100 + diffX/4;
            for(int i = 0; i < punti.size(); i++){
                //punti.get(i).x = bordoOrizzontale + (punti.get(i).x - bordoOrizzontale) + diffX/4;
            
                //punti.get(i).x += bordoOrizzontale - diffX/4;
            }
        }
        if(height > DIM_MIN[1]){
            System.out.println("altezza");
            
            for(int i = 0; i < punti.size(); i++){
                //punti.get(i).y = bordoVerticale + (punti.get(i).y - bordoVerticale) + diffY/2;
            }
        }
        if(width == DIM_MIN[0] && height == DIM_MIN[1]){
            System.out.println("niente");
            bordoOrizzontale = 100;
            
        }
        //this.triangolo.reset();
        triangolo.addPoint(bordoOrizzontale, height/4);
        triangolo.addPoint(bordoOrizzontale+catetoMinore, height/4);
        triangolo.addPoint(bordoOrizzontale+catetoMinore, height/4 + catetoMaggiore);
        System.out.println(catetoMaggiore);
        
        //System.out.println(diffX + "     " + diffY);
        //bottoneIndietro.setLocation(bottoneIndietro.getLocation().x + diffX,bottoneIndietro.getLocation().y + diffY);
        repaint();
    }
    
    /*public void update(Graphics g){
        this.paint(g);
    }*/
    
    public void paint(Graphics g){
        Graphics2D g2 = (Graphics2D)g;
        Color sfondo = new Color(204,255,255);
        g.setColor(sfondo);
        g.fillRect(0, 0,this.getWidth() ,this.getHeight());
        //bottoneIndietro.paint(g);
        g.setColor(Color.BLACK);
        g.drawLine(this.getWidth()/2, 0, this.getWidth()/2, this.getHeight());
        
        g.setColor(Color.red);
        g.fillPolygon(triangolo);
        
        //g.draw
        
        this.width = this.getWidth();
        this.height = this.getHeight();
//        System.out.println(contenitoreTriangolo[0] + "   " + contenitoreTriangolo[1] + "   " + contenitoreTriangolo[2] + "   " + contenitoreTriangolo[3]);
        for(int i = 0; i < punti.size();i++){
            Point p = punti.get(i);
            if(p.x <=  width/2){
                x = new int[punti.size()];
                y = new int[punti.size()];
                x[i] = p.x;
                y[i] = p.y;
                forma.addPoint(p.x+5, p.y+5);  
            }else{
                removePunto(punti.get(i));
            }
        }
        
        for(int i = 0; i < punti.size(); i++){
            if(i > 1){
                //g.drawLine(punti.get(i).x+5, punti.get(i).y+5, punti.get(i-1).x+5, punti.get(i-1).y+5);
                g.setColor(Color.DARK_GRAY);
                g.fillPolygon(forma);
                this.forma.reset();
                
            }            
            g.setColor(Color.GREEN);
            g.fillOval(punti.get(i).x, punti.get(i).y, 10, 10);
        }
        
        //areaTriangolo.
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlakeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlakeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlakeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlakeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlakeManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bottoneGenera;
    private javax.swing.JButton bottoneIndietro;
    private javax.swing.JButton bottoneReset;
    private javax.swing.JButton bottoneSalva;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
