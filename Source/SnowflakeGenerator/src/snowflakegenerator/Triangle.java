package snowflakegenerator;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.List;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.geom.Area;
import java.awt.geom.PathIterator;

/**
 *
 * @author Giorgio
 */
public class Triangle extends javax.swing.JPanel implements MouseListener{
    
    private int width = 1024;
    
    private int height = 768;
    
    private List<Point> punti;
    
    private int bordoOrizzontale = 100;
    
    private int catetoMaggiore = height/2;
    
    private int catetoMinore = (int)(catetoMaggiore/Math.sqrt(3));
    
    private int ipotenusa = catetoMinore*2;
    
    private int x[];
    
    private int y[];
    
    private Polygon forma = new Polygon();
    
    private Polygon triangolo = new Polygon();
    
    private Polygon triangoloFinale = new Polygon();
    
    public static final int DIM_MIN[] = {1024,768};
    
    private Area areaForma = new Area(forma);
    
    private Area areaTriangolo = new Area(triangolo);
    
    private boolean disegnaTriangoloOriginale = true;
    private boolean disegnaTriangoloNuovo = false;
    private boolean disegnaForma = true;
    private boolean chiudiForma = false;

    /**
     * Creates new form FlakeManagement
     */
    public Triangle() {
        initComponents();
        this.setSize(1024,768);
        this.punti = new ArrayList<>();
        
        this.addMouseListener(new MouseAdapter(){
        }); 
        
        triangolo.addPoint(bordoOrizzontale, height/4);
        triangolo.addPoint(bordoOrizzontale+catetoMinore, height/4);
        triangolo.addPoint(bordoOrizzontale+catetoMinore, height/4 + catetoMaggiore);
    }
    
    private void addPunto(Point p){
        punti.add(p);
    }
    
    private void removePunto(Point p){
        punti.remove(p);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bottoneIndietro = new javax.swing.JButton();
        bottoneReset = new javax.swing.JButton();
        bottoneSalva = new javax.swing.JButton();
        bottoneGenera = new javax.swing.JButton();

        bottoneIndietro.setBackground(new java.awt.Color(255, 51, 51));
        bottoneIndietro.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bottoneIndietro.setText("Indietro");
        bottoneIndietro.setName(""); // NOI18N
        bottoneIndietro.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                bottoneIndietroComponentHidden(evt);
            }
        });
        bottoneIndietro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneIndietrotornaIndietro(evt);
            }
        });

        bottoneReset.setBackground(new java.awt.Color(255, 51, 51));
        bottoneReset.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bottoneReset.setText("Reset");
        bottoneReset.setName(""); // NOI18N
        bottoneReset.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                bottoneReset1ComponentHidden(evt);
            }
        });
        bottoneReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneReset1(evt);
            }
        });

        bottoneSalva.setBackground(new java.awt.Color(255, 51, 51));
        bottoneSalva.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bottoneSalva.setText("Salva");
        bottoneSalva.setName(""); // NOI18N
        bottoneSalva.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                bottoneSalvaComponentHidden(evt);
            }
        });
        bottoneSalva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneSalva(evt);
            }
        });

        bottoneGenera.setBackground(new java.awt.Color(255, 51, 51));
        bottoneGenera.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        bottoneGenera.setText("Genera");
        bottoneGenera.setName(""); // NOI18N
        bottoneGenera.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                bottoneGeneraComponentHidden(evt);
            }
        });
        bottoneGenera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bottoneGenera(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bottoneIndietro, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bottoneReset, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bottoneSalva, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(bottoneGenera, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bottoneIndietro, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bottoneReset, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bottoneSalva, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bottoneGenera, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(717, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bottoneIndietroComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_bottoneIndietroComponentHidden

    }//GEN-LAST:event_bottoneIndietroComponentHidden

    private void bottoneIndietrotornaIndietro(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneIndietrotornaIndietro
        this.setVisible(false);
        new StartMenu().setVisible(true);
    }//GEN-LAST:event_bottoneIndietrotornaIndietro

    private void bottoneReset1ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_bottoneReset1ComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_bottoneReset1ComponentHidden

    private void bottoneReset1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneReset1
        this.punti.clear();
        for(int i = 0; i < x.length; i++){
            this.x[i] = 0;
        }
        for(int j = 0; j < y.length; j++){
            this.y[j] = 0;
        }
        repaint();
    }//GEN-LAST:event_bottoneReset1

    private void bottoneSalvaComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_bottoneSalvaComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_bottoneSalvaComponentHidden

    private void bottoneSalva(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneSalva
        /*JFileChooser fileChooser = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV files", "csv");
        fileChooser.setFileFilter(filter);
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        int ris = fileChooser.showOpenDialog(this);
        if (ris == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
        }*/
    }//GEN-LAST:event_bottoneSalva

    private void bottoneGeneraComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_bottoneGeneraComponentHidden

    }//GEN-LAST:event_bottoneGeneraComponentHidden

    private void bottoneGenera(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bottoneGenera

        this.disegnaForma = false;
        this.disegnaTriangoloNuovo = true;
        this.disegnaTriangoloOriginale = false;

        this.areaTriangolo.intersect(this.areaForma);

        PathIterator iterator = areaTriangolo.getPathIterator(null);

        float[] floats = new float[6];
        int i = 0;
        while (!iterator.isDone()) {
            i++;
            int type = iterator.currentSegment(floats);
            int x = (int) floats[0];
            int y = (int) floats[1];
            if(type != PathIterator.SEG_CLOSE) {
                triangoloFinale.addPoint(x, y);
                System.out.println(i);
            }
            iterator.next();
        }

        //this.triangolo.reset();
        //this.triangolo = triangoloNuovo;

        this.forma.reset();

        System.out.println("ho generato");
        repaint();

    }//GEN-LAST:event_bottoneGenera

    private void allargaArea() {
        this.triangolo.reset();
        this.width = this.getWidth();
        this.height = this.getHeight();
        catetoMaggiore = height/2;
        catetoMinore = (int)(catetoMaggiore/Math.sqrt(3));
        ipotenusa = catetoMinore*2;
        
        int diffX = width - DIM_MIN[0];
        int diffY = height - DIM_MIN[1];
        if(width > DIM_MIN[0]){
            System.out.println("largezza");
            bordoOrizzontale = 100 + diffX/4;
            for(int i = 0; i < punti.size(); i++){
                //punti.get(i).x = bordoOrizzontale + (punti.get(i).x - bordoOrizzontale) + diffX/4;
            
                //punti.get(i).x += bordoOrizzontale - diffX/4;
            }
        }
        if(height > DIM_MIN[1]){
            System.out.println("altezza");
            
            for(int i = 0; i < punti.size(); i++){
                //punti.get(i).y = bordoVerticale + (punti.get(i).y - bordoVerticale) + diffY/2;
            }
        }
        if(width == DIM_MIN[0] && height == DIM_MIN[1]){
            System.out.println("niente");
            bordoOrizzontale = 100;
            
        }
        //this.triangolo.reset();
        triangolo.addPoint(bordoOrizzontale, height/4);
        triangolo.addPoint(bordoOrizzontale+catetoMinore, height/4);
        triangolo.addPoint(bordoOrizzontale+catetoMinore, height/4 + catetoMaggiore);
        System.out.println(catetoMaggiore);
        
        this.areaTriangolo = new Area(this.triangolo);
        this.areaForma = new Area(this.forma);
        System.out.println(diffX + "     " + diffY);
        //bottoneIndietro.setLocation(bottoneIndietro.getLocation().x + diffX,bottoneIndietro.getLocation().y + diffY);
        repaint();
    }
    
        public void paint(Graphics g){
        Graphics2D g2 = (Graphics2D)g;
        //colora lo sfondo
        Color sfondo = new Color(204,255,255);
        g.setColor(sfondo);
        g.fillRect(0, 0,this.getWidth() ,this.getHeight());
        //disegna la riga in mezzo
        g.setColor(Color.BLACK);
        g.drawLine(this.getWidth()/2, 0, this.getWidth()/2, this.getHeight());

        for(int i = 0; i < punti.size();i++){
            Point p = punti.get(i);
            if(p.x <=  width/2){
                x = new int[punti.size()];
                y = new int[punti.size()];
                x[i] = p.x;
                y[i] = p.y;
                //forma.addPoint(p.x+5, p.y+5);  
            }else{
                removePunto(punti.get(i));
            }
        }
        
        this.areaTriangolo = new Area(this.triangolo);
        this.areaForma = new Area(this.forma);
        
        
        if(this.disegnaTriangoloOriginale){
            g.setColor(Color.red);
            g.fillPolygon(this.triangolo);
        }
        if(this.disegnaForma){
            for(int i = 0; i < punti.size(); i++){
                if(i > 1){
                    //g.drawLine(punti.get(i).x+5, punti.get(i).y+5, punti.get(i-1).x+5, punti.get(i-1).y+5);
                    g.setColor(Color.DARK_GRAY);
                    g.fillPolygon(forma);
                    this.forma.reset();

                }            
                g.setColor(Color.GREEN);
                g.fillOval(punti.get(i).x, punti.get(i).y, 10, 10);
            }
            
        }
        
        g.setColor(Color.BLACK);
        //g2.fill(areaTriangolo);
        g.fillPolygon(triangoloFinale);
        /*if(this.disegnaTriangoloNuovo){
            g.setColor(Color.red);
            g.fillPolygon(this.triangoloFinale);
        }*/
    }
    
        public void mouseClicked(MouseEvent e) {
        if(e.getPoint().x >= x[0] - 5 && e.getPoint().x <= x[0] + 5    &&    e.getPoint().y >= y[0] - 5 && e.getPoint().y <= y[0] + 5){
            for(int i = 0; i < x.length; i++){
                int x = this.x[i];
                int y = this.y[i];
                Point p = new Point(x,y);
                forma.addPoint(x, y);
                this.disegnaForma = true;
            }
        }else{
            addPunto(e.getPoint());
        }
        
        repaint();
    }

    @Override
    public void mousePressed(MouseEvent arg0) {
        
    }

    @Override
    public void mouseReleased(MouseEvent e){

    }

    @Override
    public void mouseEntered(MouseEvent arg0) {
        
    }

    @Override
    public void mouseExited(MouseEvent arg0) {
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bottoneGenera;
    private javax.swing.JButton bottoneIndietro;
    private javax.swing.JButton bottoneReset;
    private javax.swing.JButton bottoneSalva;
    // End of variables declaration//GEN-END:variables
    
}
